@model OpenBookSystemMVC.Models.EditDocumentModel
@{
    ViewBag.Title = "EditDocument";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render("~/Content/docedit")
@Styles.Render("~/Content/colorpicker")
@Styles.Render("~/Content/chosen")
@Styles.Render("~/Content/font-awesome/css/fontawesome")
@Styles.Render("~/Scripts/Magnific/magnific")

@{ MvcForm formDocument = null; // You don't want to know...

   if (Model.DocumentID == 0 && Model.IsNewDocument)
   {
       formDocument = Html.BeginRouteForm("New Document", FormMethod.Post, new { id = "formDocument", enctype = "multipart/form-data" });
   }
   else
   {
       formDocument = Html.BeginForm("SaveDocument", "Documents", FormMethod.Post, new { id = "formDocument", enctype = "multipart/form-data" });
   }     
}
@using (formDocument)
{    
    @*<link href="~/Content/font-awesome/css/font-awesome.css" rel="stylesheet" />*@
    <link rel="stylesheet" type="text/css" href="/Content/smoothDivScroll.css" />   
    
    <div class="doc-inner-body">

        @*          TOOLBAR WITH BUTTONS            *@

        <ul class="edit-document-toolbar @{if (Model.IsNewDocument) { Write(" make-invisible"); } }"  >
            
            @if (Model.Themes)
            {            
                <li class="theme-button blank-button">
                    <div data-bind="click: $root.ToggleThemeMenu" class="theme-menu-trigger" title="@ClientDefault.DocumentEdit_ThemeHint">
                        <span class="menu-span">@ClientDefault.DocumentEdit_Theme </span>
                        <div class="theme-icon-outer menu-div">
                            @*<div data-bind="style: { 'border-top-color': $root.CurrentTheme().BackgroundColor, 'border-right-color': $root.CurrentTheme().FontColor }" class="theme-icon-inner"></div>*@
                            <div data-bind="attr: { 'style': 'border-top-color:' + $root.CurrentTheme().BackgroundColor + ';' + 'border-right-color:' + $root.CurrentTheme().FontColor }" class="theme-icon-inner"></div>
                        </div>
                    </div>
                
                    <ul class="theme-menu" data-bind="foreach: Themes, visible: $root.ThemesMenuShow()">
                        <li data-bind="click: $root.SelectTheme">
                            <div class="theme-icon-outer menu-div">
                                <div data-bind="attr: { 'style': 'border-top-color:' + $data.BackgroundColor + ';' + 'border-right-color:' + $data.FontColor }" class="theme-icon-inner menu-div"></div>
                            </div>
                            <span class="menu-label-span" data-bind="attr: {'style': 'background-color:' + $data.BackgroundColor + ';' + 'color:' + $data.FontColor }"> @ClientDefault.EditDocument_SampleThemeText </span>
                        </li>
                    </ul>
                </li>
            }

            @if (Model.FontSize)
            {
                <li class="blank-button" >
                    <span class="font-size-label"> @Resources.ClientDefault.EditDocument_Size </span>
                    <select ID="ddlFontSize" class="select-fontsize" data-bind="event: {'change': ChangeFontSize}" data-selected="@Model.DocumentFontSize" title="@ClientDefault.DocumentEdit_SizeHint">
                        <option value="14">Aa</option>
                        <option value="16">Aa</option>
                        <option value="18">Aa</option>
                        <option value="20">Aa</option>
                        <option value="22">Aa</option>
                        <option value="24">Aa</option>
                        <option value="0">Aa</option>
                    </select>
                </li>
            }
            @if (Model.Underline)
            {
                <li data-bind="css: { 'active-button': $root.IsUnderlineSelected() }, click: UnderlineTextAction " title="@ClientDefault.DocumentEdit_UnderlineHint">
                    <div class="button-icon-wrapper">
                        <span class="icon-underline fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text" >@ClientDefault.DocumentEdit_Underline</span>
                    </div>
                </li>
            }
            @if (Model.Bold)
            {
                <li data-bind="css: { 'active-button': $root.IsBoldSelected() }, click: BoldTextAction" title="@ClientDefault.DocumentEdit_BoldHint">
                    
                    <div class="button-icon-wrapper">
                        <span class="icon-bold fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text" >@ClientDefault.DocumentEdit_Bold</span>
                    </div>

                </li>
            }
            @if (Model.Highlight)
            {
                <li data-bind="css: { 'active-button': $root.IsHighlightSelected() } , click: HighlightTextAction" title="@ClientDefault.DocumentEdit_HighlightHint"> 
                    <div class="button-icon-wrapper">
                        <span class="icon-hand-up fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text" >@ClientDefault.DocumentEdit_Highlight</span>
                    </div>                    
                </li>
            }
            @if (Model.MagnifyingGlass)
            {
                <li id="magnify-button" data-bind="click: ToggleMagnify, css: { 'active-button': IsMagnifyOn() } "
                    data-magnifyon="@ClientDefault.DocumentEdit_MagnifyOnHint" data-magnifyoff="@ClientDefault.DocumentEdit_MagnifyOffHint" title="@ClientDefault.DocumentEdit_MagnifyOffHint">
                    <div class="button-icon-wrapper">
                        <span class="icon-lightbulb fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text" >@ClientDefault.DocumentEdit_Magnify</span>
                    </div>                                         
                </li>
            }            
            @if (Model.Notes)
            {
                <li id="notes-button" data-bind="click: ToggleNote, css: { 'active-button': IsNoteOn() }" title="@ClientDefault.DocumentEdit_NotesHint"
                    data-notesoff="@ClientDefault.DocumentEdit_NotesHint" data-noteson="@ClientDefault.DocumentEdit_NotesOnHint">
                    <div class="button-icon-wrapper">
                        <span class="icon-edit fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text" >@ClientDefault.EditDocument_AddNote</span>
                    </div>                    
                </li>
            }
            @if (Model.ExplainWord)
            {
                <li data-bind="click: ExplainWord" title="@ClientDefault.DocumentEdit_ExplainWordHint">
                    <div class="button-icon-wrapper">
                        <span class="icon-question-sign fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text" >@ClientDefault.EditDocument_ExplainWord</span>
                    </div>                                                           
                </li>
            }
            @if (Model.ExplainWordWithPicture)
            {
                <li data-bind="click: ExplainWordWithPictures" title="@ClientDefault.DocumentEdit_ExplainWithPictureHint">
                    <div class="button-icon-wrapper">
                        <span class="icon-picture fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="long-button-text" >@ClientDefault.EditDocument_ExplainWithPicture</span>
                    </div>
                </li>
            }
            @if (Model.AskCarer && Model.DocumentID != 0 && Model.AskCarer)
            {
                <li data-bind="click: $root.AskCarer" title="@ClientDefault.DocumentEdit_AskCarerHint" >
                    <div class="button-icon-wrapper">
                        <span class="icon-envelope fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text" >@ClientDefault.EditDocument_AskCarer</span>
                    </div>                    
                </li>
            }

            @if ( Model.SummaryOn && (Model.Summary != null && Model.Summary.Length > 0))
            {
                <li data-bind="click: $root.ReadSummaryModel.ToggleReadSummary" title="@ClientDefault.EditDocument_SummaryHint">
                    <div class="button-icon-wrapper">
                        <span class="icon-file-text  fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text">@ClientDefault.DocumentReview_Summary</span>
                    </div>  
                </li>
            }

            @if (Model.ShowMultiwords)
            {                           
                <li title="@ClientDefault.EditDocument_ShowObstaclesHint" data-bind="click: ToggleMultiwords, css: { 'active-button': IsMultiwordOn() }">
                    <div class="button-icon-wrapper">
                        <span class="icon-resize-horizontal fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text">@ClientDefault.EditDocument_ShowMultiwords</span>
                    </div>
                </li>
            }
            
            @if (Model.ShowObstacles)
            {                            
                <li title="@ClientDefault.EditDocument_ShowObstaclesHint" data-bind="click: ToggleObstacles, css: { 'active-button': IsObstaclesOn() }">
                    <div class="button-icon-wrapper">
                        <span class="icon-puzzle-piece fonticon-fix"></span>
                    </div>
                    <div class="button-text-wrapper">
                        <span class="button-text">@ClientDefault.EditDocument_ShowObstacles</span>
                    </div>
                </li>
            }
        </ul>       

        @if (!Model.IsNewDocument)
        {
            <div class="document-title">
                @Model.Title
            </div>    
        }

        @*          USER INPUT AREAS                *@

        <ul class="tabs-text-input">
            @if (Model.IsNewDocument)
            {
                <li data-id="text">@Resources.ClientDefault.EditDocument_Text </li>
                <li data-id="url" class=" hide-item">@Resources.ClientDefault.EditDocument_URL_C </li>
                <li data-id="file" class=" hide-item">@Resources.ClientDefault.EditDocument_File </li>
                <li data-id="orig" class="wide-item hide-item">@Resources.ClientDefault.EditDocument_Orig_Text
                </li>
                <li data-id="conv" class="wide-item hide-item">@Resources.ClientDefault.EditDocument_Conv_Text
                </li>
            }
            else
            {
                <li data-id="text" class="hide-item">@Resources.ClientDefault.EditDocument_Text
                </li>
                <li data-id="url" class="hide-item">@Resources.ClientDefault.EditDocument_URL_C
                </li>
                <li data-id="file" class="hide-item">@Resources.ClientDefault.EditDocument_File
                </li>            
            
                <li data-id="orig" class="wide-item">@Resources.ClientDefault.EditDocument_Orig_Text
                </li>
                <li data-id="conv" class="wide-item">@Resources.ClientDefault.EditDocument_Conv_Text
                </li> 
            }
        </ul>
        
        <div class="document-input-container" style="position:relative">
            @Html.TextAreaFor(m => m.Content, new { id = "input-text", data_id = "text", placeholder = @ClientDefault.DocumentEdit_TextInput_Placeholder })
            @Html.TextBoxFor(m => m.URL, new { id = "input-url", data_id = "url", placeholder = @ClientDefault.DocumentEdit_UrlInput_Placeholder })
            <div id="input-file" data-id="file" class="document-input-div-container">
                <span id="input-file-name"></span>
                @Html.TextBoxFor(m => m.FileForConvert, new { type = "file", @class = "make-invisible", id = "input-file-upload" })
                <input type="button" id="button-select-file" class="button-select-file" value="@ClientDefault.Browse_Dots" />
                @Html.ValidationMessageFor(m => m.FileForConvert)
            </div>
            @Html.TextAreaFor(m => m.OriginalContent, new { id = "result-original", data_id = "orig", @readonly = "readonly" })
            <div id="result-simplified" style="font-family: @Model.User.Preferences.DocumentFontName" class="document-input-div-container" tabindex="0" data-id="conv" @{ if (Model.Role == AccountRoles.Carer) { Write("contenteditable=true"); } }
                 data-bind="style: { 'color': $root.CurrentTheme().FontColor }, click: $root.ApplyDocumentOperations, css: {'place-note-cursor' : $root.IsNoteOn(), 'show-multiwords': IsMultiwordOn, 'show-obstacles': IsObstaclesOn }  ">
                @Model.SimplifiedContent
            </div>            
            <div class="simplifying-loader">
            </div>
        </div>
        
            <div class="dialog-explain-wrapper">
            @if (!Model.IsNewDocument)
            {
                //AskCarer notification area
                <div data-bind="visible: IsNotificationOn, with: $root.Notification " class="notificationDialog">
                    <div data-bind="text: $root.FromLabel()" class="notifSingleLine"></div>
                    <div data-bind="text: $root.RelatedLabel()" class="notifSingleLine"></div>
                    <span class="notifSingleLine" >@ClientDefault.EditDocument_NotificationSubject</span>
                    <input data-bind="value: $data.Subject" />
                    <textarea data-bind="value: $data.Message"></textarea>
                    <div class="askcarerButtonbar">
                        <a data-bind="click: $root.SendNotification" >@ClientDefault.EditDocument_Send</a>
                        <a data-bind="click: $root.CancelNotification" >@ClientDefault.Library_Cancel</a>
                    </div>
                </div>
            }
            

                <div data-bind="visible: IsExplainWordOn" class="document-operation-result">
                    <div class="notificationHeader">
                        <span data-bind="text: Localization.GetResource('EditDocument_ExplainWord') + ': '"></span>
                        <input data-bind="value: $root.ExplainWordModel.SearchText" type="text" id="searchText" />
                        <button class="obs-button" data-bind="click: $root.ExplainWordModel.GetSearchExplain">@ClientDefault.DocumentReview_Explain</button>
                        <a data-bind="click: $root.ClearResultArea" class="close-result-button"></a>
                    </div>
                    <div class="operation-result-body">
                        <div class="picture_box" data-bind="visible: $root.ExplainWordModel.IsReady">
                            <div data-bind="text: $root.ExplainWordModel.Description"></div>
                            <span data-bind="visible: $root.ExplainWordModel.Pictures() != null && $root.ExplainWordModel.Pictures().length > 0" class="picture_box_title">@ClientDefault.EditDocument_Pictures</span>
                            <!-- ko foreach: $data.Pictures -->
                            <img align="middle" class="small_image" data-bind="attr: { 'alt': $root.ExplainWordModel.Word(), 'title': $root.ExplainWordModel.Word(), src: $data }" />
                            <!-- /ko -->
                            <span class="no-definition-text" data-bind="visible: $root.ExplainWordModel.Description().length == 0">@ClientDefault.EditDocument_NoDefinition</span>
                        </div>
                        <div class="picture_box ajax_loader" data-bind="visible: $root.ExplainWordModel.IsLoading">

                        </div>
                        <div class="picture_box server-error" data-bind="visible: $root.ExplainWordModel.IsError">
                            <span data-bind="text: $root.ExplainWordModel.ErrorMessage"></span>
                            <span data-bind="visible: $root.ExplainWordModel.ErrorMessage().length == 0">@ClientDefault.ServerCommunicationError</span>
                        </div>
                    </div>
                </div>
            
                <div data-bind="visible: IsExplainWithPictureOn, with: ExplainWordWithPictureModel" class="document-operation-result">
                    <div class="notificationHeader">
                        <span data-bind="text: Localization.GetResource('EditDocument_ExplainWithPicture') + ': '"></span>
                        <input data-bind="value: $root.ExplainWordWithPictureModel.SearchText" name="searchText" id="searchText" />
                        <button class="obs-button" data-bind="click: $root.ExplainWordWithPictureModel.GetSearchExplain">@ClientDefault.ExplainWord</button>
                        <a data-bind="click: $root.ClearResultArea" class="close-result-button"></a>
                    </div>
                    <div class="operation-result-body">

                        <div class="picture_box" data-bind="visible: IsReady">
                            <!-- ko foreach: $data.Pictures -->
                            <img align="middle" class="small_image" data-bind="attr: {src: $data }" />  @*'alt': $root.ExplainWordWithPictureModel().Word(), 'title': $root.ExplainWordWithPictureModel().Word(),*@
                            <!-- /ko -->
                            <span></span>
                        </div>
                        <div class="picture_box ajax_loader" data-bind="visible: IsLoading">

                        </div>
                        <div class="picture_box server-error" data-bind="visible: IsError">
                            <span data-bind="text: ErrorMessage"></span>
                            <span data-bind="visible: ErrorMessage().length == 0">@ClientDefault.ServerCommunicationError</span>
                        </div>                        
                    </div>
                </div>

                <div id="note-result" data-bind="visible: IsShowNoteOn, with: NoteModel" class="document-operation-result">
                    <div class="notificationHeader">
                        @ClientDefault.EditDocument_AddNote
                        <a data-bind="click: $root.ClearResultArea" class="close-result-button"></a>
                    </div>
                    <div class="operation-result-body">
                        <textarea data-bind="value: Text, style: {'font-size': FontSize}" placeholder="@ClientDefault.EditDocument_NewNoteText" class="note-text"></textarea>
                        <a data-bind="click: $root.DeleteNote, visible: IsUserNote" class="button-delete-note">@ClientDefault.UserAccount_Delete</a>
                        <a data-bind="click: $root.SaveNote.bind($data, $element), visible: IsUserNote" class="button-save-note" title="">@ClientDefault.Library_Save</a>
                    </div>
                </div>
                
                
                <div data-bind="visible: IsCustomMessageOn()" class="customMessage">
                    <span data-bind="text: CustomMessage"></span>
                </div>

                <div id="read-summary" class="document-operation-result" data-bind="visible: $root.ReadSummaryModel.IsShown">
                    <div class="notificationHeader">@ClientDefault.DocumentReview_Summary</div>
                    <div class="summary-content">@Model.Summary</div>

                    <a data-bind="click: $root.ClearResultArea" class="close-result-button"></a>
                </div>

            </div>             
        

        @Html.HiddenFor(m => m.User.AccountId, new { id = "hidden-patient-id" })

        <div id="label_check_done_container" 
            data-bind="click: ToggleCheckButton" 
            class="check-container @{if (Model.IsNewDocument) { Write(" hide-item"); } } @{ Write(Model.IsCompleted ? " label-check-selected" : " label-check-deselected"); }">

            @Html.CheckBoxFor(m => m.IsCompleted, new { id = "input-check-done", @class = "hide-item" })
            <label id="label-check-done" data-id="@Model.DocumentID" runat="server" for="input-check-done" class="label-check-done">
                &nbsp;</label>
            <div class="done-label-wrapper">
                <span id="Label3" class="apprText">
                    @Resources.ClientDefault.EditDocument_Done
                </span>
            </div>

        </div>   

        @Html.ValidationSummary("", new { id = "editdoc-error-summary" })

        @if (Model.IsNewDocument && Model.User.CarerId != 0)
        {
            <div class="privacy-radiogroup">
                @Html.RadioButtonFor(x => x.IsShared, true)
                @ClientDefault.EditDocument_ShareWithCarer
                <br />
                @Html.RadioButtonFor(x => x.IsShared, false)
                @ClientDefault.EditDocument_PrivateDocument
            </div>
        }

        <div class="document-button-bar @{if (!Model.IsNewDocument) { Write(" document-button-bar-inedit"); } }" >
            <input type="submit" id="button-convert-text" class="convert-text @{if (!Model.IsNewDocument) { Write(" hide-item"); } }" value="@Resources.ClientDefault.DocumentEdit_Convert_Text_C" />
            <input type="button" id="button-submit-text" data-bind="click: LoggingModel.SaveLogData" class="save-text-button @{if (Model.IsNewDocument) { Write(" hide-item"); } }" value="@Resources.ClientDefault.DocumentEdit_Save_Result_C" />
            <a target="_blank" href="@string.Format("/Documents/Print?nDocID={0}", Model.DocumentID)" id="button-print-document" class="view-document-print @{if (Model.DocumentID == 0) { Write(" hide-item"); } }" data-isnew="@{ Write(Model.IsNewDocument); }" >@ClientDefault.Documents_Print_C</a>
            <a id="btnDownload" class="close-document-button @{if (Model.IsNewDocument) { Write(" hide-item"); } }">@ClientDefault.Download.ToUpper()</a>
            @*<a href="/Test/GetTest/@Model.DocumentID" class="close-document-button @{if (Model.IsNewDocument) { Write(" hide-item"); } }" style="width: 120px !important;">@ClientDefault.EditDocument_Take_The_Test.ToUpper()</a>*@
            <a href="/Documents/List" class="close-document-button">@ClientDefault.DocumentEdit_Close</a>
        </div>

        <div id="dialog-explain-content">

        </div>    

        <div id="dlgDownload">
            @Resources.ClientDefault.EditDocument_Save_Document:
            <ul>
                <li><input type="radio" name="downloadType" value="1" id="rbTxt" /><label for="rbTxt">Text file(*.txt)</label></li>
                <li><input type="radio" name="downloadType" value="2" id="rbHtml" /><label for="rbHtml">HTML file(*.html)</label></li>
                <li><input type="radio" name="downloadType" value="3" id="rbPdf" /><label for="rbPdf">PDF file(*.pdf)</label></li>
            </ul>
        </div>

        <div id="dialog-title-content" class="hide-item">
            <span>@ClientDefault.DocumentEdit_DocName </span>
            <input type="text" class="input-doc-title" />
        </div>
        <div id="dialog-explain" class="hide-item">
            <ul class="list-word-choices">
            </ul>
        </div>
        <div class="dialog-select-picture hide-item">
            <div class="images-wrapper">
            </div>
        </div>

        <label class="hide-item text-node-point" contenteditable="false" data-bind="click: $root.ShowNote.bind($data, $element)" data-content=""></label>                

    </div>
      
  
    @Html.HiddenFor(m => m.CarerID, new { id = "hidden-carer-id" })
    @Html.HiddenFor(m => m.DocumentID, new { id = "hidden-document-id" })
    @Html.HiddenFor(m => m.Role)
    @Html.HiddenFor(m => m.Title, new { id = "hidTitle" })
    @Html.HiddenFor(m => m.SimplifiedContent, new { id = "hidden-simplified-content" })
    @Html.HiddenFor(m => m.OriginalContent)
    @Html.HiddenFor(m => m.IsFavourite)
    @Html.HiddenFor(m => m.Summary)
    @Html.HiddenFor(m => m.User.AccountId, new { id = "hidden-user-id" })
    @Html.HiddenFor(m => m.User.FirstName, new { id = "hidden-user-fname" })
    @Html.HiddenFor(m => m.BasicJSONData, new { id = "hidden-jsondata" })
    @Html.HiddenFor(m => m.ReceiverID)
    @Html.HiddenFor(m => m.UserActionsLog, new { id = "hidUserActionsLog" })
    
    <input type="hidden" id="hidLineSpacing" @{Write(string.Format("value={0}", Model.CalculatedLineSpacing));} />
    
    @Html.HiddenFor(m => m.User.Preferences.DocumentFontSize, new { id = "hidDocFontSize" })              
    
    <input id="hidNotSaved" type="hidden" value="@ViewBag.IsUnSaved"/>
    
    if (!string.IsNullOrEmpty(Model.UserLabels))
    {
        @Html.HiddenFor(m => m.UserLabels, new { id = "hidden-user-themes" });
    }

}

<script type="text/javascript" src="~/Scripts/jquery.colorPicker.js"></script>

<script type="text/javascript">
    var dictionary = new Array();
    dictionary['SaveDocument'] = '@Resources.ClientDefault.EditDocument_Save_Document';
    var documentId = '@Model.DocumentID';
</script>

@Scripts.Render("~/bundles/knockout-mapping")
@Scripts.Render("~/bundles/chosen")
@Scripts.Render("~/bundles/magnific")
@Scripts.Render("~/bundles/moment")

<script src="~/Scripts/Placeholders/Placeholders.min.js"></script>
<script src="~/Scripts/spin.min.js"></script>

@*@Scripts.Render("~/bundles/editdoc")*@
<script type="text/javascript" src="~/Scripts/DocumentEditHelpers.js"></script>

@*@Scripts.Render("~/bundles/colorpicker", "~/bundles/editdoc") *@